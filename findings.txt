Summarise your findings here (see specification).

**FINDIGS**

- hard difficulty: mystery3.dat
- extremely hard difficulty: mystery1.dat
- impossible to solve: mystery2.dat

**JUSTIFICATION**

To determine the difficulty of each of the boards, I consider how many
times the recursive functiion solve_board(board) has to be called
(shown by 'depth') and also how many times the function makes a
mistake and has to backtrack (shown by back_track). The
'depth' amount includes the number of mistakes but also the number of times another empty spot has
to be found, and hence takes into account how empty the board was at the
start. Therefore, the measure of difficulty indicated by
backtrack_count is in terms of how many times the computer makes a
mistake, whereas the the difficulty indicated by the value of 'depth'
is more in terms of the memory the program uses to solve the puzzle,
as it not only includes the number of mistakes but also the initial emptiness
of the puzzle.

It is important to note that the difficulty would be
different for a human who solves the board using a different
algorithm. Here, the 'depth' and 'backtrack_count' variables only
indicate the relative difficulty of the boards for a computer using this
backtracking algortihm. For instance, if the board was designed in a
way where the top-left corner was empty and is supposed to be filled
with high digits, a computer that uses the algorithm of iterating from
'1' to '9' would find the board harder than a human solving it.

**METHOD**

To track the number of times the 'solve_board(board) function is
called, a static integer 'depth' is added at the start of the 'solve_board(board)' function. It is
incremented every time the function is called and printed out on the
screen (this is is now commented-out in the function definition):

	    static int depth =0;
  	    depth++;
  	    cout<< "depth = " << depth <<endl;

Similarly, the static integer 'backtrack_count' is incremented
every time the solve_board(board) function was unsuccessful at
'guessing' a certain digit and has to backtrack and assign '.' to the
position. The following is added after the position is set back to
'.':
	 backtrack_count++;
	 cout<< "Backtrack_count= "<< backtrack_count<<endl;

The difference between these two static variables is simply the number
of empty spaces at the beginning plus one (for when the function is
called at the end and all positions are filled).

**RESULTS**

HARD DIFFICULTY
This is mystery3.dat. The value of the depth integer is 14134 once
the board has been solved, and the backtrack_count is 14076. This means the function was called 14134
times in order to solve the board, which includes 14076 times that it 'made
a mistake' at guessing the digit and had to backtrack.


EXTREMELY HARD DIFFICULTY
This is mystery1.dat. The value of the depth integer is 421547 by the
time the board is solved, and the backtrack_count is 421488. As these
values are larger than for the board mystery3.dat, it means
mystery1.dat is extremely hard as the solve_board(board) function made
more mistakes and had to backtrack more times. And in total the memory
used by the program was much larger than for mystery3.dat.


IMPOSSIBLE TO SOLVE
This is mystery2.dat. The 'solve_board(board)' function returns false
for this board.


These findings are consistent with values of 'depth' and
'backtrack_count' for the easy.dat and medium.dat boards. The board easy.dat has a depth value of 2172
(including 2116 times it had to backtrack) and the medium.dat board
has a depth value of 15662 (including 15605 times it had to backtrack).


